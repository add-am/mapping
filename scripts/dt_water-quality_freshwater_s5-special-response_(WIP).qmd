---
title: "Freshwater Water Quality Exploratory Data Analysis"
subtitle: "A Healthy Waters Partnership Analysis"
description: "Script 5 in a series of script designed to analyse, score, and present freshwater water quality in the Dry Tropics region. The output of this is used in the Dry Tropics Technical Report."
author: "Adam Shand"
format: html
params:
  project_crs: "EPSG:7844"
  target_fyear: 2023 
  sites_removed: FALSE
---

:::{.callout-note}
The Water Quality suite of scripts currently do not adhere to the CamelCase naming rules. This is due to filtering and code that relies on snake_case naming to work. This will take a significant amount of time to overhaul.
:::

# Introduction

The purpose of this script is to perform special data analysis in response to finding that "fall out" of the technical report analysis. This script will become a bit of a hodge-podge of random graphs and calculations as needed by each technical report.

::: {.callout-note}
## Note
This script will produce a variety of responses dependent on the target_fyear (see yaml). For each FY of special analysis, initiate the code chunk inside an if-else statement such that the code will only run if the correct FY data is loaded.
:::

# Script Set Up

This script requires multiple core spatial packages, each of which is loaded below.

```{r}
#| label: load packages

#use pacman function to load and install (if required) all other packages
pacman::p_load(tidyverse, glue, here, janitor, openxlsx2, reactable, ggplot2)

```

```{r}

#turn off scientific notation
options(scipen = 999)

#set ggplot theme
theme_set(theme_bw(8))

#establish what financial year we are looking at
current_fyear <- params$target_fyear

#determine if we want the dataset to be the one with removed sites, or the original
removed <- params$sites_removed

#set a path directly to the data as, thanks to script one, this is the only data we will need. Note the years in the name
data_path <- glue("{here()}/data/dt_water-quality_freshwater/processed/{current_fyear-1}-{current_fyear}_freshwater_wq_all")

#get a date variable (this is important for naming as it is anticipated multiple runs of the script will be required).
date <- format(Sys.time(), "%Y-%m-%d")

#create a file path for the year of data that is being looked at
year_folder <- glue("{here()}/outputs/dt_water-quality_freshwater_s5-special-response/{current_fyear-1}-{current_fyear}_analysis/")

#create that folder
dir.create(year_folder, recursive = T)

#create a file path to help with saving things, make sure to include date
save_path <- glue("{year_folder}/analysis_conducted_on_{date}/")

#create folder
dir.create(save_path, recursive = T)

```

# Load Data

Data for this script is provided in a single spreadsheet that was prepared by script 1 in this series of scripts. Please note that script 1 may have removed some offending values, if this is the case a warning will notify as such.

```{r}
#| label: load data
#| warning: true

if (file.exists(glue("{data_path}_sites_removed.csv")) & removed == T){ #if post removed exists, and that is what you want
  
  #read in data
  freshwater_wq_all <- read_csv(glue("{data_path}_sites_removed.csv"))
  
  #provide a notifying warning
  warning("The data that has been loaded in has had some values removed as per the QA/QC checks 
          performed in script 1 of this series. Please confirm this is the dataset you would like
          to use.")
  
} else if (file.exists(glue("data_path}.csv"))){ #if a dataset that never needed removal exists
  
  #read in data
  freshwater_wq_all <- read_csv(glue("{data_path}.csv"))

} else { #otherwise, take the pre removal dataset
  
  #read in data
  freshwater_wq_all <- read_csv(glue("{data_path}_pre_removal.csv"))
    
}

#convert columns to factors and give them the custom order we use in the technical report
freshwater_wq_all <- freshwater_wq_all |> 
  mutate(across(c(Basin, Sub_Basin, Watercourse), factor),
         Basin = fct_relevel(Basin, "Ross", "Black"), 
         Sub_Basin = fct_relevel(Sub_Basin, "Upper Ross River", "Lower Ross River", "Bohle River", "Black River", 
                                 "Bluewater Creek", "Rollingstone Creek", "Crystal Creek"), 
         Watercourse = fct_relevel(Watercourse, "Ross Lake", "Aplins Weir", "Gleesons Weir",
                                   "Blacks Weir", "Bohle Mid-Field", "Bohle Far-Field", "Black River", 
                                   "Althaus Creek", "Bluewater Creek","Sleeper Log Creek", "Leichhardt Creek",
                                   "Saltwater Creek",  "Rollingstone Creek", "Ollera Creek", "Crystal Creek",
                                   "Paluma Lake"))

```

# Special Analysis

## FY: 2023

The following code is only applicable to the 2023 financial year.

The first question is around why Ross Lake DIN decreased. We will look specifically at this variable over the past 3 years below.

```{r}
#| label: Ross Lake DIN

if (current_fyear == 2023){

  #filter data
  ross_lake_din <- freshwater_wq_all |> 
    filter(Indicator == "DIN", Watercourse == "Ross Lake", FY > 2018)
  
  #create a basic line plot
  ross_line_plot <- ggplot(ross_lake_din) +
    geom_line(mapping = aes(x = Date, y = Values, colour = Code)) +
    geom_line(mapping = aes(x = Date, y = WQO), color = "black") +
    geom_hline(mapping = aes(yintercept = WQO, linetype = glue("{WQO}")), colour = "black") +
    scale_linetype_manual(name = "DIN WQO and LOR", values = 1) +
    ylab("DIN (mg/L)")
  
}

#save graph
ggsave(glue("{save_path}/ross_lake_DIN.png"), width = 4.5, height = 5)


```

The second question is what has the historical concentrations of DIN and TP been in the Bohle River sub basin.

```{r}
#| label: Bohle DIN and TP

#filter data for what we want
bohle_din <- freshwater_wq_all |> 
  filter(Indicator == "DIN", Sub_Basin == "Bohle River", FY > 2018)

#pull out WQO
WQO <- unique(bohle_din$WQO)

#map data and put the WQO over the top
bohle_line_plot <- ggplot(bohle_din) +
  geom_line(mapping = aes(x = Date, y = Values, colour = Watercourse)) +
  geom_hline(mapping = aes(yintercept = WQO, linetype = glue("{WQO}")), colour = "black") +
  scale_linetype_manual(name = "DIN WQO", values = 1) +
  ylab("DIN (mg/L)")

#save graph
ggsave(glue("{save_path}/bohle_DIN.png"), width = 4.5, height = 5)

#filter data for what we want
bohle_tp <- freshwater_wq_all |> 
  filter(Indicator == "TP", Sub_Basin == "Bohle River", FY > 2018)

#pull out WQO
WQO <- unique(bohle_tp$WQO)

#map data and put the WQO over the top
bohle_line_plot <- ggplot(bohle_tp) +
  geom_line(mapping = aes(x = Date, y = Values, colour = Watercourse)) +
  geom_hline(mapping = aes(yintercept = WQO, linetype = glue("{WQO}")), colour = "black") +
  scale_linetype_manual(name = "TP WQO", values = 1) +
  ylab("TP (mg/L)")

#save graph
ggsave(glue("{save_path}/bohle_TP.png"), width = 4.5, height = 5)

```

