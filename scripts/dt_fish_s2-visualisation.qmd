---
title: "Freshwater Fish Script 2 - Data Visualisation"
subtitle: "A Healthy Waters Partnership Analysis"
description: "Script 2 in a series of scripts designed to analyse and score freshwater fish sampled in the Dry Tropics region."
author: "Adam Shand"
format: html
params:
  project_crs: "EPSG:7844"
---

# Introduction

This is a simple script to calculate scores and grades for the freshwater Fish indicator category in the Freshwater environment for the Dry Tropics region. Following this we will then produce a map of sampling locations. 


# Script Set Up

This script requires multiple core spatial packages, each of which is loaded below.

```{r}
#| label: load packages

#use pacman function to load and install (if required) all other packages
pacman::p_load(tidyverse, glue, here, sf, tmap, janitor, readxl, dataaimsr, grid)

```


Then set the coordinate reference system and save location.

```{r}
#| label: global vars and initial setup

#set crs
proj_crs <- params$project_crs

#create a file path to help with saving things
save_path <- here("outputs/dt_fish_s2-visualisation/")

#create a data path as well
data_path <- here("data/dt_fish/processed/")

#bring that path to life
dir.create(here(save_path))

#turn off S2 mapping
sf_use_s2(FALSE)

```

# Load Data

Below we load all the required data.

## Spatial Data

First up we need to load the spatial data.

```{r}
#| label: load spatial data

#read in the custom function to clean column names into our specific style
source("../functions/name_cleaning.R")

#read in the northern three dataset
n3_region <- st_read(here("data/n3_prep_region-builder/n3_region.gpkg")) |> 
  name_cleaning()

#filter for only the dry tropics land component
dt_land <- n3_region |> 
  filter(Region == "Dry Tropics", Environment != "Marine") |> 
  group_by(BasinOrZone, SubBasinOrSubZone) |> 
  summarise(geom = st_union(geom)) |> 
  ungroup() |> st_cast() |> st_make_valid()

#read in the nothern three watercourses dataset
n3_watercourse <- st_read(here("data/n3_prep_watercourse-builder/n3_watercourse.gpkg")) |> 
  name_cleaning()

#filter for only the dry tropics component, and of stream order not 0 or 1
dt_watercourses <- n3_watercourse |> 
  filter(Region == "Dry Tropics", !StreamOrder %in% c(0, 1))

#read in qld outlines data from the gisaimsr package, filter for land and islands, update crs
qld <- get(data("gbr_feat", package = "gisaimsr")) |> 
  name_cleaning() |> 
  filter(FeatName %in% c("Mainland", "Island")) |> 
  st_transform(proj_crs)

```

## Fish Data

Then we can pull in the relevant fish data that was created by the first dt_fish script.

```{r}
#| label: load fish data

#get the edited fish data
fish_data <- read_csv(glue("{data_path}/fish_data.csv")) |> 
  name_cleaning()

#convert to a spatial file
fish_sites <- fish_data |> 
  select(Region, Basin, Watercourse, Site, LatWgs84, LongWgs84) |> 
  unique() |> group_by(Basin) |> 
  arrange(desc(Basin), Site) |> 
  mutate(SiteNumber = row_number()) |> 
  st_as_sf(coords = c(6, 5), crs = proj_crs)

#get the edited fish results
fish_results <- read_csv(glue("{data_path}/fish_results.csv"))

```

# Visualise

We can now create the map and plots.

## Maps

Below we map the sampling locations. 

```{r}
#| label: create fish maps

#create target vector to loop lover
target_vect <- unique(dt_land$BasinOrZone)

#get a dt bbox
dt_bbox <- st_bbox(dt_land)

for (i in 1:length(target_vect)){#each basin
  
  #filter sites
  filtered_sites <- fish_sites |> filter(Basin == target_vect[i])
  
  #define focus area for waterways
  focus_area <- dt_land |> filter(BasinOrZone == target_vect[i]) |> rename("Sub Basin: All" = SubBasinOrSubZone)

  #create a box of the focus area
  focus_bbox <- st_as_sfc(st_bbox(filtered_sites))
  
  #crop waterways to be within focus area
  focus_dt_water <- dt_watercourses |> st_intersection(st_union(focus_area))
  
  #create an inset map
  inset_map <- tm_shape(qld) +
    tm_polygons(col = "grey80", border.col = "black") +
    tm_shape(dt_land, is.master = T) +
    tm_polygons(col = "grey90", border.col = "black") +
    tm_shape(focus_bbox) +
    tm_borders(lwd = 2, col = "red")
  
  #create the main map
  map <- tm_shape(focus_bbox) +
    tm_borders(alpha = 0) +
    tm_shape(qld) +
    tm_polygons(col = "grey80", border.col = "black") +
    tm_shape(dt_land) +
    tm_polygons(col = "grey90", border.col = "black") +
    tm_shape(focus_area) +
    tm_polygons(col = "Sub Basin: All", border.col = "black", alpha = 0.5, palette = "Pastel1") +
    tm_shape(focus_dt_water) +
    tm_lines(col = "dodgerblue") +
    tm_shape(focus_dt_water) +
    tm_polygons(col = "aliceblue", border.col = "dodgerblue") +
    tm_shape(filtered_sites) +
    tm_symbols(col = "Site", palette = "-Spectral", border.col = "black", legend.col.show = F) +
    tm_shape(st_buffer(filtered_sites, as.numeric(sprintf("0.%s", i))), is.master = T) +
    tm_borders(alpha = 0) +
    tm_shape(filtered_sites) +
    tm_text("SiteNumber", shadow = T, size = 0.8, auto.placement = T) +
    tm_layout(legend.bg.color = "white", legend.frame = "black", asp = 1.1, legend.position = c("left", "bottom"))

  #figure out the aspect of the inset map and the view port
  asp2 <- (dt_bbox$ymax - dt_bbox$ymin)/(dt_bbox$xmax - dt_bbox$xmin)
  w <- 0.2
  h <- asp2 * w
  vp <- viewport(x = 0.98, y = 0.97, width = w, height = h, just = c("right", "top"))

  #save map
  tmap_save(map, glue("{save_path}/{tolower(target_vect[i])}-fish.png"), 
            insets_tm = inset_map, insets_vp = vp)

}

```

which (roughly) looks like this:

```{r}
#| label: show map
#| output: true

#show map
map

```

## Boxplots

Below we make the boxplots for each indicator category in each basin. Using results from all sites within the basin.

### POISE

Because each indicator category is remarkably different in scale, we will do them one at a time. Starting with POISE.

```{r}
#| label: box plots

#set theme
theme_set(theme_bw(8))

#get data
fish_box_data <- fish_results |> 
  select(Basin, SitePoise, SitePonis) |> 
  mutate(Basin = fct_reorder(Basin, desc((Basin)))) |> 
  unique()

#Set up the background data frame by creating the grade, value and basin categorization
grade <- factor(c("Very Good (>81)", "Good (61 - <81)", "Moderate (41 - <61)", "Poor (21 - <41)", "Very Poor (<21)"),
                levels = c("Very Good (>81)", "Good (61 - <81)", "Moderate (41 - <61)", "Poor (21 - <41)", "Very Poor (<21)"))
value <- rev(c(0.40, 0.13, 0.14, 0.13, 0.2))
basin  <- rep(c("Ross", "Black"), each = length(grade))
palette <- rep(c("#00B050", "#92D050", "#FFFF00", "#FFC000", "#FF0000"))

#create the actually breaks to put on the y axis
breaks <- c(0.40, 0.53, 0.67, 0.80, 1)

#build data frame
df <- data.frame(Basin = basin, Grade = grade, Value = value, Palette = palette)

#create the background
background <- ggplot() + 
  geom_bar(data = df, mapping = aes(fill = Grade, y = Value, x = Basin), 
           position = "stack", stat = "identity", width = 1, alpha = 0.5) + # increase width to fully cover background
  expand_limits(y = 0) +
  scale_color_manual(values = palette, name = "Grade") + 
  scale_fill_manual(values = palette, name = "Grade") +
  scale_y_continuous(name = "POISE Score", breaks = breaks, expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0))

#create the rest of the plot
p <- background +
  geom_violin(data = fish_box_data, mapping = aes(x = Basin, y = SitePoise), 
              width = 1, fill = "cadetblue3") +
  geom_boxplot(data = fish_box_data, mapping = aes(x = Basin, y = SitePoise), 
               width = 0.1,  fill = "grey90", alpha = 0.5) +
  ggtitle(glue("Proportion of Indigenous Species Expected Standarised Score")) +
  theme_bw() + theme(panel.grid.major = element_blank(), 
                     panel.grid.minor = element_blank()) +
  theme(plot.title = element_text(hjust = 0.5))

#save plot
ggsave(glue("{save_path}/POISE_boxplot.png"), p, height = 8, width = 7)

```

which looks like this:

```{r}
#| label: show POISE plot
#| output: true

p

```

### PONIS

And followed by PONIS.

```{r}
#| label: create PONIS plot

#Set up the background data frame by creating the grade, value and basin categorization
grade <- factor(c("Very Poor (<21)", "Poor (21 - <41)", "Moderate (41 - <61)", "Good (61 - <81)", "Very Good (>81)"),
                levels = c("Very Poor (<21)", "Poor (21 - <41)", "Moderate (41 - <61)", "Good (61 - <81)", "Very Good (>81)"))
value <- rev(c(0.03, 0.02, 0.05, 0.1, 0.8))
basin  <- rep(c("Ross", "Black"), each = length(grade))
palette <- rev(rep(c("#00B050", "#92D050", "#FFFF00", "#FFC000", "#FF0000")))

#create the actually breaks to put on the y axis
breaks <- c(0.03, 0.05, 0.1, 0.2, 1)

#build data frame
df <- data.frame(Basin = basin, Grade = grade, Value = value, Palette = palette)

#create the background
background <- ggplot() + 
  geom_bar(data = df, mapping = aes(fill = Grade, y = Value, x = Basin), 
           position = "stack", stat = "identity", width = 1, alpha = 0.5) + # increase width to fully cover background
  expand_limits(y = 0) +
  scale_color_manual(values = palette, name = "Grade") + 
  scale_fill_manual(values = palette, name = "Grade") +
  scale_y_continuous(name = "PONIS Score", breaks = breaks, expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0))

#create the rest of the plot
p <- background +
  geom_violin(data = fish_box_data, mapping = aes(x = Basin, y = SitePonis), 
              width = 0.8, fill = "cadetblue3") +
  geom_boxplot(data = fish_box_data, mapping = aes(x = Basin, y = SitePonis), 
               width = 0.1,  fill = "grey90", alpha = 0.5) +
  ggtitle(glue("Proportion of Non-Indigenous Species Standarised Score")) +
  theme_bw() + theme(panel.grid.major = element_blank(), 
                     panel.grid.minor = element_blank()) +
  theme(plot.title = element_text(hjust = 0.5))

#save plot
ggsave(glue("{save_path}/PONIS_boxplot.png"), p, height = 8, width = 7)

```

which looks like this:

```{r}
#| label: show PONIS plot
#| output: true

p

```




